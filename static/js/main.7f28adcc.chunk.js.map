{"version":3,"sources":["FeelingItems.js","FeelingList.js","index.js"],"names":["FeelingItems","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","createFeelings","bind","assertThisInitialized","feeling","react_default","a","createElement","key","time","emoji","listFeelings","addedFeelings","map","Component","FeelingList","state","feelings","addFeeling","e","_inputElement","value","d","Date","newItem","now","toLocaleTimeString","setState","prevState","concat","preventDefault","_this2","className","onSubmit","ref","type","src_FeelingItems","ReactDOM","render","src_FeelingList_0","document","getElementById"],"mappings":"gOA4BeA,cAzBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAOJ,KAEFQ,eAAiBP,EAAKO,eAAeC,KAApBP,OAAAQ,EAAA,EAAAR,CAAAD,IAHLA,8EAONU,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAQI,KAAMJ,EAAQK,KAA/B,MAAwCL,EAAQM,wCAIvD,IACIC,EADWd,KAAKJ,MAAMmB,cACEC,IAAIhB,KAAKI,gBAGvC,OACEI,EAAAC,EAAAC,cAAA,UACDI,UAnB0BG,aCoEZC,qBAjEf,SAAAA,EAAYtB,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IAChBrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,KAAMJ,KAEDuB,MAAQ,CACXC,SAAU,IAGZvB,EAAKwB,WAAaxB,EAAKwB,WAAWhB,KAAhBP,OAAAQ,EAAA,EAAAR,CAAAD,IAPFA,0EAUPyB,GAET,GAAgC,KAA5BtB,KAAKuB,cAAcC,MAAa,CAElC,IAAIC,EAAI,IAAIC,KACRC,EAAU,CACZd,MAAOb,KAAKuB,cAAcC,MAC1Bb,IAAKe,KAAKE,MACVhB,KAAMa,EAAEI,sBAMd7B,KAAK8B,SAAS,SAACC,GACb,MAAM,CACJX,SAAUW,EAAUX,SAASY,OAAOL,MAIxC3B,KAAKuB,cAAcC,MAAM,GAGvBF,EAAEW,kDAGK,IAAAC,EAAAlC,KACT,OACAQ,EAAAC,EAAAC,cAAA,OAAKyB,UAAY,mBACjB3B,EAAAC,EAAAC,cAAA,OAAKyB,UAAY,UACjB3B,EAAAC,EAAAC,cAAA,QAAM0B,SAAUpC,KAAKqB,YACrBb,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAQ2B,IAAK,SAAC5B,GAAD,OAAOyB,EAAKX,cAAgBd,IAC3BD,EAAAC,EAAAC,cAAA,UAAQc,MAAQ,gBAAhB,gBACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAQ,gBAAhB,gBACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAQ,gBAAhB,gBACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAQ,gBAAhB,gBACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAQ,gBAAhB,gBACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAQ,gBAAhB,gBACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAQ,gBAAhB,gBACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAQ,gBAAhB,gBACAhB,EAAAC,EAAAC,cAAA,UAAQc,MAAQ,gBAAhB,iBAEfhB,EAAAC,EAAAC,cAAA,UAAQ4B,KAAK,UAAb,QAGA9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAcxB,cAAef,KAAKmB,MAAMC,oBA1DdH,cCI1BuB,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAAiBC,SAASC,eAAe","file":"static/js/main.7f28adcc.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nclass FeelingItems extends Component {\n  constructor(props) {\n    super (props);\n\n    this.createFeelings = this.createFeelings.bind(this);\n  }\n\n// make a formated object of each feeling i.e. item in the list we want to print\ncreateFeelings(feeling){\n  return <li key={feeling.key}>{feeling.time} > {feeling.emoji}</li>\n}\n\nrender(){\n  var feelings = this.props.addedFeelings;\n  var listFeelings = feelings.map(this.createFeelings);\n\n\nreturn (\n  <ul>\n{listFeelings}\n  </ul>\n);\n\n}\n}\n\nexport default FeelingItems;\n","import React, {Component} from \"react\";\nimport FeelingItems from \"./FeelingItems\";\nimport \"./FeelingList.css\"\n\nclass FeelingList extends Component{\nconstructor(props){\n  super(props);\n\n  this.state = {\n    feelings: []\n  };\n\n  this.addFeeling = this.addFeeling.bind(this);\n}\n\naddFeeling(e) {\n  //check if a feeling has been chosen before we continue\n  if (this._inputElement.value !==\"\") {\n    // yes! we have a new feeling and so we go on gathering the properties of the feeling\n    var d = new Date();\n    var newItem = {\n      emoji: this._inputElement.value,\n      key: Date.now(),\n      time: d.toLocaleTimeString()\n};\n\n// set a newly created list with all existing feelings + the new feeling as the current state\n// this is save because we a) rely on the well kept previous state (previous version of the list) and\n// b) because we make sure we return a new list instead of modifying the old one\nthis.setState((prevState) => {\n  return{\n    feelings: prevState.feelings.concat(newItem)\n  };\n});\n\nthis._inputElement.value=\"\";\n  }\n\n  e.preventDefault();\n}\n\nrender() {\nreturn(\n<div className = \"feelingListMain\" >\n<div className = \"header\" >\n<form onSubmit={this.addFeeling}>\n<label>How do you feel?</label>\n<br />\n <select ref={(a) => this._inputElement = a}>\n               <option value = \"ðŸ˜º\">ðŸ˜º</option>\n               <option value = \"ðŸ˜¹\">ðŸ˜¹</option>\n               <option value = \"ðŸ˜»\">ðŸ˜»</option>\n               <option value = \"ðŸ˜¼\">ðŸ˜¼</option>\n               <option value = \"ðŸ˜¸\">ðŸ˜¸</option>\n               <option value = \"ðŸ˜½\">ðŸ˜½</option>\n               <option value = \"ðŸ™€\">ðŸ™€</option>\n               <option value = \"ðŸ˜¿\">ðŸ˜¿</option>\n               <option value = \"ðŸ˜¾\">ðŸ˜¾</option>\n             </select>\n<button type=\"submit\">Add</button>\n</form>\n\n<FeelingItems addedFeelings={this.state.feelings} />\n</div>\n</div>\n\n)\n}\n}\n\nexport default FeelingList;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport FeelingList from \"./FeelingList\";\n\n\n\n\nReactDOM.render(<FeelingList />, document.getElementById('container'));\n"],"sourceRoot":""}